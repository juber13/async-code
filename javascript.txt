** javascript notes **

** difference between stack and heap

!stack
it store all the primitives value like string number boolean null undefined Symbol NaN

!Heap
it store all not primitive value like object{} array[] and functions


!Note
when we assign primitive value to a variable and we try to assign to another value that time 
original value does not change it's make a new copy of that variable and assign that

!example

let name = "juber";
let userName = name;

if we console the value then it will print
console.log(name , userName)  
!output will be
juber , juber

if we try to change the username then name value will not change it remain same
!example  
userName = "juber khan";

if we console the value then the out will be 

!output
userName will be "juber khan"
and name will be remian same like juber;



! Note 
when we assign not primitive values (reference) to a variables then all the value is created ih the heap
memory and the we we try to reassign the value then original value is copied  
!example

let user = {name : "juber" , age : 23}
let userTwo = user;
if we console the value then the out put will be name : juber ; age : 23

! note

when we try to update the user name then userTwo name will be also changed because we are assign the value by refrence 
in heap all the value is store by the reference




! substring 
var str = "juber-khan"
substring does not contains last value index
example str.substring(0, 4);  jube
example str.substring(1, 5);  uber
var str = "juber-khan";
console.log(str.substring(0,4));  // jube
console.log(str.substring(1,5));  // uber
console.log(str.substring(1));  // uber-khan


! Hoisting

In javascript Hoisting is a javascript behavior , where variables and functions decalarations are moved to the top 
of their containign scop  during the compilation phase  before the code is excuted  which means
u can use functions and variables before they are decleared 


!slice and splice Arrays Methods

slice =>  slice return a copy of array and it does not include last value elements
splice => spilce modifies in original array and it also not include last value

str = "juberkhan"

const newStr = str.slice(0 , 4); //  juber
const newStr2 =  str.spilce(0 , 3) // jube

Arrays.from("juber")  ['j' , 'b' , 'e' , 'r'] // convert the string into array
Arrays.isArray("juber)  // false  // check if passed parameter is a array return true or false
const a = 12;
const b = 14;
const c = 122;
Arrays.of(a, b, c); // convert the variables into array

